/*
This document shows what a High Level Intermediate Representation (HLIR or HIR) might look like
for this compiler. This is a very rough draft and is subject to change. Ive just designed this
with what I know I will need in an HLIR in mind. This is a starting template that I can
implement within the semantic analyzer.

What is an HLIR?
An HLIR is a representation of the source code that is more abstract than the AST. It is
designed to be easier to work with and to be more detailed than the AST. The HLIR can be seen
as the AST after it has been semantically analyzed, and it contains metadata neccessary for
the next stages of the compiler.
*/
Declaration(
    type_spec: (
        ty: Int(true),
        qualifier: Some([
            Const,
        ]),
        specifiers: None,
    ),
    ident: "x",
    initializer: Some((
        ty: Int(true),
        expr: Binary(
            op: Add,
            lhs: (
                ty: Int(true),
                expr: Literal(Int(5)),
                span: (
                    file: "main.c",
                    start: 0,
                    end: 0,
                ),
            ),
            rhs: (
                ty: Int(true),
                expr: Literal(Int(2)),
                span: (
                    file: "main.c",
                    start: 0,
                    end: 0,
                ),
            ),
        ),
        span: (
            file: "main.c",
            start: 0,
            end: 0,
        ),
    )),
    span: (
        file: "main.c",
        start: 0,
        end: 0,
    ),
)
